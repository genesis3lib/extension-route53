name: Extension-210-Client-SSL-Route53

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: {{region}}
  DNS_PROVIDER: route53

jobs:
  configure-alternate-domain:
    name: Configure CloudFront Alternate Domain
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Env setup
        run: |

          # Set environment variables
          echo "BRANCH={{{githubVarsOpen}}} github.ref_name {{{githubVarsClose}}}" >> $GITHUB_ENV
          if [[ "{{{githubVarsOpen}}} github.ref_name {{{githubVarsClose}}}" = "main" || "{{{githubVarsOpen}}} github.ref_name {{{githubVarsClose}}}" = "production" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            BRANCH_ENV=$(echo "{{{githubVarsOpen}}} github.ref_name {{{githubVarsClose}}}" | sed "s/-/-/g")
            echo "ENVIRONMENT=$BRANCH_ENV" >> $GITHUB_ENV
          fi

          echo "‚úÖ Environment setup completed: {{{githubVarsOpen}}} github.ref_name {{{githubVarsClose}}}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::{{{githubVarsOpen}}} vars.AWS_ACCOUNT_ID {{{githubVarsClose}}}:role/{{projectName}}-terraform-role
          aws-region: {{{githubVarsOpen}}} env.AWS_REGION {{{githubVarsClose}}}

      - name: Configure CloudFront Alternate Domain
        run: |
          echo "üåê Configuring CloudFront alternate domain for {{projectName}} {{{githubVarsOpen}}} env.ENVIRONMENT {{{githubVarsClose}}}..."

          PROJECT_NAME="{{projectName}}"
          ENVIRONMENT="{{{githubVarsOpen}}} env.ENVIRONMENT {{{githubVarsClose}}}"

          # Domain construction with environment-specific prefix
          if [ "${ENVIRONMENT}" = "production" ]; then
            UI_DOMAIN="{{projectName}}-ui.{{sld}}.{{tld}}"
          else
            UI_DOMAIN="{{projectName}}-${ENVIRONMENT}-ui.{{sld}}.{{tld}}"
          fi

          echo "üìã Configuration:"
          echo "  Project: $PROJECT_NAME"
          echo "  Environment: $ENVIRONMENT"
          echo "  UI Domain: $UI_DOMAIN"

          # Find the CloudFront distribution
          echo "DEBUG: Finding CloudFront distribution..."
          DISTRIBUTION_ID=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?Comment=='$PROJECT_NAME $ENVIRONMENT client distribution'].Id" \
            --output text 2>/dev/null || true)

          if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" = "None" ]; then
            echo "‚ùå CloudFront distribution not found for $PROJECT_NAME $ENVIRONMENT"
            echo "Expected comment: '$PROJECT_NAME $ENVIRONMENT client distribution'"
            exit 1
          fi

          echo "‚úÖ Found CloudFront distribution: $DISTRIBUTION_ID"
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_ENV

          # Check if alternate domain is already configured
          echo "DEBUG: Checking current alternate domains..."
          CURRENT_ALIASES=$(aws cloudfront get-distribution-config --id "$DISTRIBUTION_ID" \
            --query 'DistributionConfig.Aliases.Items' --output text 2>/dev/null || echo "")

          echo "Current aliases: $CURRENT_ALIASES"

          if echo "$CURRENT_ALIASES" | grep -q "$UI_DOMAIN"; then
            echo "‚úÖ Alternate domain '$UI_DOMAIN' is already configured"
            exit 0
          fi

          # Find or create ACM certificate for the domain (CloudFront requires us-east-1)
          echo "DEBUG: Looking for ACM certificate in us-east-1 (required for CloudFront)..."
          echo "DEBUG: Searching for domain: $UI_DOMAIN"

          # Debug: List all certificates first
          echo "DEBUG: DEBUG: All available certificates:"
          aws acm list-certificates --region us-east-1 --query "CertificateSummaryList[].{Domain:DomainName,SAN:SubjectAlternativeNameSummary,Arn:CertificateArn}" --output table || true

          CERT_ARN=$(aws acm list-certificates --region us-east-1 \
            --query "CertificateSummaryList[?DomainName=='$UI_DOMAIN'].CertificateArn" \
            --output text 2>/dev/null | head -1 || true)

          # If not found by domain name, search in SAN using a simpler approach
          if [ -z "$CERT_ARN" ] || [ "$CERT_ARN" = "None" ]; then
            echo "DEBUG: Searching in Subject Alternative Names..."
            # Get all certificates and search manually
            ALL_CERTS=$(aws acm list-certificates --region us-east-1 --query "CertificateSummaryList[].[CertificateArn,DomainName]" --output text 2>/dev/null || true)
            while IFS=$'\t' read -r cert_arn cert_domain; do
              if [ -n "$cert_arn" ]; then
                # Get detailed certificate info to check SAN
                SAN_DOMAINS=$(aws acm describe-certificate --certificate-arn "$cert_arn" --region us-east-1 \
                  --query "Certificate.SubjectAlternativeNames" --output text 2>/dev/null || true)
                if echo "$SAN_DOMAINS" | grep -q "$UI_DOMAIN"; then
                  CERT_ARN="$cert_arn"
                  echo "‚úÖ Found certificate with $UI_DOMAIN in SAN: $CERT_ARN"
                  break
                fi
              fi
            done <<< "$ALL_CERTS"
          fi

          echo "DEBUG: DEBUG: Query result for exact domain: '$CERT_ARN'"

          if [ -z "$CERT_ARN" ] || [ "$CERT_ARN" = "None" ]; then
            echo "‚ö†Ô∏è No ACM certificate found for domain: $UI_DOMAIN"
            echo "DEBUG: Looking for wildcard certificate that might cover this domain..."

            # Check for wildcard certificates
            WILDCARD_DOMAIN="*.{{sld}}.{{tld}}"
            echo "DEBUG: Searching for wildcard: $WILDCARD_DOMAIN"

            CERT_ARN=$(aws acm list-certificates --region us-east-1 \
              --query "CertificateSummaryList[?DomainName=='$WILDCARD_DOMAIN'].CertificateArn" \
              --output text 2>/dev/null | head -1 || true)

            # If not found by domain name, search in SAN manually
            if [ -z "$CERT_ARN" ] || [ "$CERT_ARN" = "None" ]; then
              echo "DEBUG: Searching wildcard in Subject Alternative Names..."
              ALL_CERTS=$(aws acm list-certificates --region us-east-1 --query "CertificateSummaryList[].[CertificateArn,DomainName]" --output text 2>/dev/null || true)
              while IFS=$'\t' read -r cert_arn cert_domain; do
                if [ -n "$cert_arn" ]; then
                  # Get detailed certificate info to check SAN
                  SAN_DOMAINS=$(aws acm describe-certificate --certificate-arn "$cert_arn" --region us-east-1 \
                    --query "Certificate.SubjectAlternativeNames" --output text 2>/dev/null || true)
                  if echo "$SAN_DOMAINS" | grep -q "$WILDCARD_DOMAIN"; then
                    CERT_ARN="$cert_arn"
                    echo "‚úÖ Found certificate with wildcard $WILDCARD_DOMAIN in SAN: $CERT_ARN"
                    break
                  fi
                fi
              done <<< "$ALL_CERTS"
            fi

            echo "DEBUG: DEBUG: Query result for wildcard: '$CERT_ARN'"

            if [ -z "$CERT_ARN" ] || [ "$CERT_ARN" = "None" ]; then
              echo "üìù No suitable certificate found. Creating new ACM certificate with Route53 validation..."

              # Find Route53 hosted zone for the domain
              DOMAIN_BASE="{{sld}}.{{tld}}"
              echo "DEBUG: Finding Route53 hosted zone for: $DOMAIN_BASE"

              HOSTED_ZONE_ID=$(aws route53 list-hosted-zones \
                --query "HostedZones[?Name=='$DOMAIN_BASE.'].Id" \
                --output text 2>/dev/null | sed 's|/hostedzone/||' || true)

              if [ -z "$HOSTED_ZONE_ID" ] || [ "$HOSTED_ZONE_ID" = "None" ]; then
                echo "‚ùå No Route53 hosted zone found for domain: $DOMAIN_BASE"
                echo "üí° Please ensure you have a Route53 hosted zone configured for your domain"
                exit 1
              fi

              echo "‚úÖ Found Route53 hosted zone: $HOSTED_ZONE_ID"

              # Request ACM certificate with DNS validation
              echo "üìã Requesting ACM certificate for $UI_DOMAIN..."
              CERT_ARN=$(aws acm request-certificate \
                --domain-name "$UI_DOMAIN" \
                --subject-alternative-names "*.{{sld}}.{{tld}}" "{{sld}}.{{tld}}" \
                --validation-method DNS \
                --region us-east-1 \
                --query 'CertificateArn' \
                --output text 2>/dev/null || true)

              if [ -z "$CERT_ARN" ] || [ "$CERT_ARN" = "None" ]; then
                echo "‚ùå Failed to request ACM certificate"
                exit 1
              fi

              echo "‚úÖ ACM certificate requested: $CERT_ARN"

              # Wait a moment for certificate to be available
              echo "‚è≥ Waiting for certificate validation records..."
              sleep 10

            # Get DNS validation records for PENDING_VALIDATION domains only
            VALIDATION_RECORDS=$(aws acm describe-certificate \
              --certificate-arn "$CERT_ARN" \
              --region us-east-1 \
              --query 'Certificate.DomainValidationOptions[?ValidationStatus==`PENDING_VALIDATION`].ResourceRecord' \
              --output json 2>/dev/null || echo "[]")

              if [ "$VALIDATION_RECORDS" = "[]" ] || [ -z "$VALIDATION_RECORDS" ]; then
                echo "‚ùå Could not get DNS validation records"
                exit 1
              fi

              echo "DEBUG: DEBUG: All validation records found:"
              echo "$VALIDATION_RECORDS" | jq '.' || echo "Failed to parse validation records"

              # Create Route53 records for all validation domains
              echo "üìù Creating Route53 validation records for all domains..."
              # First, create a simplified JSON structure
              echo "$VALIDATION_RECORDS" | jq -r 'unique_by(.Name) | .[] | "\(.Name)|\(.Value)"' > /tmp/validation-pairs.txt
              
              # Build the Route53 change batch JSON
              echo '{"Changes":[' > /tmp/validation-record.json
              
              first=true
              while IFS='|' read -r name value; do
                if [ "$first" = true ]; then
                  first=false
                else
                  echo ',' >> /tmp/validation-record.json
                fi
                
                # Use full domain name for Route53 but remove trailing dot
                clean_name=$(echo "$name" | sed 's/\.$//')
                
                printf '                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "%s",
                    "Type": "CNAME",
                    "TTL": 300,
                    "ResourceRecords": [
                      {
                        "Value": "%s"
                      }
                    ]
                  }
                }' "$clean_name" "$value" >> /tmp/validation-record.json
              done < /tmp/validation-pairs.txt
              
              echo ']}' >> /tmp/validation-record.json

              echo "DEBUG: Route53 change batch JSON:"
              cat /tmp/validation-record.json | jq '.' || echo "Failed to parse change batch JSON"

              echo "DEBUG: Calling Route53 API with hosted zone: $HOSTED_ZONE_ID"
              CHANGE_ID=$(aws route53 change-resource-record-sets \
                --hosted-zone-id "$HOSTED_ZONE_ID" \
                --change-batch file:///tmp/validation-record.json \
                --query 'ChangeInfo.Id' \
                --output text 2>&1)
              
              if [ $? -ne 0 ]; then
                echo "‚ùå Route53 API call failed:"
                echo "$CHANGE_ID"
                exit 1
              fi

              if [ -z "$CHANGE_ID" ] || [ "$CHANGE_ID" = "None" ]; then
                echo "‚ùå Failed to create Route53 validation record"
                exit 1
              fi

              echo "‚úÖ Route53 validation record created: $CHANGE_ID"

              # Wait for Route53 change to propagate
              echo "‚è≥ Waiting for Route53 change to propagate..."
              aws route53 wait resource-record-sets-changed --id "$CHANGE_ID"
              echo "‚úÖ Route53 change propagated"

              # Wait for certificate validation
              echo "‚è≥ Waiting for ACM certificate validation (this may take a few minutes)..."
              WAIT_COUNT=0
              MAX_WAIT=300  # 300 checks = ~100 minutes (20 seconds between checks)

              while [ $WAIT_COUNT -lt $MAX_WAIT ]; do
                CERT_STATUS=$(aws acm describe-certificate --certificate-arn "$CERT_ARN" --region us-east-1 \
                  --query 'Certificate.Status' --output text 2>/dev/null || echo "UNKNOWN")

                echo "Certificate status: $CERT_STATUS (check $((WAIT_COUNT + 1))/$MAX_WAIT)"

                if [ "$CERT_STATUS" = "ISSUED" ]; then
                  echo "‚úÖ Certificate successfully validated and issued!"
                  break
                elif [ "$CERT_STATUS" = "PENDING_VALIDATION" ]; then
                  echo "‚è≥ Still validating... waiting 20 seconds"
                  sleep 20
                  WAIT_COUNT=$((WAIT_COUNT + 1))
                else
                  echo "‚ùå Unexpected certificate status: $CERT_STATUS"
                  exit 1
                fi
              done

              if [ $WAIT_COUNT -ge $MAX_WAIT ]; then
                echo "‚ùå Certificate validation timed out after ~10 minutes"
                echo "Please check the certificate status in AWS Console and re-run this workflow"
                exit 1
              fi

              # Cleanup temp file
              rm -f /tmp/validation-record.json
            else
              echo "‚úÖ Found wildcard certificate: $CERT_ARN"
            fi
          else
            echo "‚úÖ Found certificate for domain: $CERT_ARN"
          fi

          # Check certificate status
          echo "DEBUG: Checking certificate status..."
          CERT_STATUS=$(aws acm describe-certificate --certificate-arn "$CERT_ARN" --region us-east-1 \
            --query 'Certificate.Status' --output text 2>/dev/null || echo "UNKNOWN")

          echo "Certificate status: $CERT_STATUS"

          if [ "$CERT_STATUS" = "PENDING_VALIDATION" ]; then
            echo "‚è≥ Certificate is pending validation. Attempting to complete validation automatically..."

            # Find Route53 hosted zone for the domain
            DOMAIN_BASE="{{sld}}.{{tld}}"
            echo "DEBUG: Finding Route53 hosted zone for: $DOMAIN_BASE"

            HOSTED_ZONE_ID=$(aws route53 list-hosted-zones \
              --query "HostedZones[?Name=='$DOMAIN_BASE.'].Id" \
              --output text 2>/dev/null | sed 's|/hostedzone/||' || true)

            if [ -z "$HOSTED_ZONE_ID" ] || [ "$HOSTED_ZONE_ID" = "None" ]; then
              echo "‚ùå No Route53 hosted zone found for domain: $DOMAIN_BASE"
              echo "üí° Please ensure you have a Route53 hosted zone configured for your domain"
              exit 1
            fi

            echo "‚úÖ Found Route53 hosted zone: $HOSTED_ZONE_ID"

            # Get DNS validation records (same as Cloudflare workflow)
            echo "DEBUG: Getting DNS validation records..."
            aws acm describe-certificate --certificate-arn "$CERT_ARN" --region us-east-1 \
              --query 'Certificate.DomainValidationOptions[].ResourceRecord.{Name:Name,Type:Type,Value:Value}' \
              --output table 2>/dev/null || true

            echo ""
            echo "üìù Creating Route53 validation records automatically..."

            # Get validation records for PENDING_VALIDATION domains only
            VALIDATION_RECORDS=$(aws acm describe-certificate --certificate-arn "$CERT_ARN" --region us-east-1 \
              --query 'Certificate.DomainValidationOptions[?ValidationStatus==`PENDING_VALIDATION`].ResourceRecord' \
              --output json 2>/dev/null || echo "[]")

            if [ "$VALIDATION_RECORDS" = "[]" ] || [ -z "$VALIDATION_RECORDS" ]; then
              echo "‚ùå No validation records found"
              exit 1
            fi

            echo "DEBUG: DEBUG: Validation records found:"
            echo "$VALIDATION_RECORDS" | jq '.' || echo "Failed to parse validation records"

            # Build Route53 change batch (deduplicate records and strip domain suffix)
            # First, create a simplified JSON structure
            echo "$VALIDATION_RECORDS" | jq -r 'unique_by(.Name) | .[] | "\(.Name)|\(.Value)"' > /tmp/validation-pairs.txt
            
            # Build the Route53 change batch JSON
            echo '{"Changes":[' > /tmp/validation-record.json
            
            first=true
            while IFS='|' read -r name value; do
              if [ "$first" = true ]; then
                first=false
              else
                echo ',' >> /tmp/validation-record.json
              fi
              
              # Use full domain name for Route53 but remove trailing dot
                clean_name=$(echo "$name" | sed 's/\.$//')
              
              printf '              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "%s",
                  "Type": "CNAME",
                  "TTL": 300,
                  "ResourceRecords": [
                    {
                      "Value": "%s"
                    }
                  ]
                }
              }' "$clean_name" "$value" >> /tmp/validation-record.json
            done < /tmp/validation-pairs.txt
            
            echo ']}' >> /tmp/validation-record.json

            echo "DEBUG: Route53 change batch JSON:"
            cat /tmp/validation-record.json | jq '.' || echo "Failed to parse change batch JSON"

            echo "DEBUG: Calling Route53 API with hosted zone: $HOSTED_ZONE_ID"
            CHANGE_ID=$(aws route53 change-resource-record-sets \
              --hosted-zone-id "$HOSTED_ZONE_ID" \
              --change-batch file:///tmp/validation-record.json \
              --query 'ChangeInfo.Id' \
              --output text 2>&1)
            
            if [ $? -ne 0 ]; then
              echo "‚ùå Route53 API call failed:"
              echo "$CHANGE_ID"
              exit 1
            fi

            if [ -z "$CHANGE_ID" ] || [ "$CHANGE_ID" = "None" ]; then
              echo "‚ùå Failed to create Route53 validation record"
              exit 1
            fi

            echo "‚úÖ Route53 validation record created: $CHANGE_ID"

            # Wait for Route53 change to propagate
            echo "‚è≥ Waiting for Route53 change to propagate..."
            aws route53 wait resource-record-sets-changed --id "$CHANGE_ID"
            echo "‚úÖ Route53 change propagated"

            # Wait for certificate validation
            echo "‚è≥ Waiting for ACM certificate validation (this may take a few minutes)..."
            WAIT_COUNT=0
            MAX_WAIT=300  # 300 checks = ~100 minutes (20 seconds between checks)

            while [ $WAIT_COUNT -lt $MAX_WAIT ]; do
              CERT_STATUS=$(aws acm describe-certificate --certificate-arn "$CERT_ARN" --region us-east-1 \
                --query 'Certificate.Status' --output text 2>/dev/null || echo "UNKNOWN")

              echo "Certificate status: $CERT_STATUS (check $((WAIT_COUNT + 1))/$MAX_WAIT)"

              if [ "$CERT_STATUS" = "ISSUED" ]; then
                echo "‚úÖ Certificate successfully validated and issued!"
                break
              elif [ "$CERT_STATUS" = "PENDING_VALIDATION" ]; then
                echo "‚è≥ Still validating... waiting 20 seconds"
                sleep 20
                WAIT_COUNT=$((WAIT_COUNT + 1))
              else
                echo "‚ùå Unexpected certificate status: $CERT_STATUS"
                exit 1
              fi
            done

            if [ $WAIT_COUNT -ge $MAX_WAIT ]; then
              echo "‚ùå Certificate validation timed out after ~10 minutes"
              echo "Please check the certificate status in AWS Console and re-run this workflow"
              exit 1
            fi

            # Cleanup temp file
            rm -f /tmp/validation-record.json
          elif [ "$CERT_STATUS" != "ISSUED" ]; then
            echo "‚ùå Certificate is in invalid state: $CERT_STATUS"
            echo "Expected status: ISSUED"
            exit 1
          fi

          echo "‚úÖ Certificate is valid and issued"

          # Get current distribution config
          echo "üîÑ Getting current distribution configuration..."
          aws cloudfront get-distribution-config --id "$DISTRIBUTION_ID" --output json > /tmp/dist-config.json

          ETAG=$(jq -r '.ETag' /tmp/dist-config.json)
          echo "Current ETag: $ETAG"

          # Update distribution config to add alternate domain
          echo "üìù Adding alternate domain to distribution..."
          jq --arg domain "$UI_DOMAIN" --arg cert_arn "$CERT_ARN" '
            .DistributionConfig.Aliases.Quantity = (.DistributionConfig.Aliases.Quantity + 1) |
            .DistributionConfig.Aliases.Items += [$domain] |
            .DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate = false |
            .DistributionConfig.ViewerCertificate.ACMCertificateArn = $cert_arn |
            .DistributionConfig.ViewerCertificate.SSLSupportMethod = "sni-only" |
            .DistributionConfig.ViewerCertificate.MinimumProtocolVersion = "TLSv1.2_2021" |
            del(.DistributionConfig.ViewerCertificate.CertificateSource)
          ' /tmp/dist-config.json > /tmp/updated-dist-config.json

          # Extract just the DistributionConfig for the update
          jq '.DistributionConfig' /tmp/updated-dist-config.json > /tmp/final-config.json

          echo "üì§ Updating CloudFront distribution..."
          aws cloudfront update-distribution \
            --id "$DISTRIBUTION_ID" \
            --distribution-config file:///tmp/final-config.json \
            --if-match "$ETAG"

          echo "‚è≥ Waiting for distribution update to deploy (this can take 15-20 minutes)..."
          echo "üí° You can monitor progress in AWS Console: https://console.aws.amazon.com/cloudfront/home?region={{{githubVarsOpen}}} env.AWS_REGION {{{githubVarsClose}}}#distribution-settings:$DISTRIBUTION_ID"

          # Check deployment status periodically with timeout
          WAIT_COUNT=0
          MAX_WAIT=60  # 60 checks = ~20 minutes (20 seconds between checks)

          while [ $WAIT_COUNT -lt $MAX_WAIT ]; do
            DIST_STATUS=$(aws cloudfront get-distribution --id "$DISTRIBUTION_ID" --query 'Distribution.Status' --output text 2>/dev/null || echo "UNKNOWN")
            echo "Distribution status: $DIST_STATUS (check $((WAIT_COUNT + 1))/$MAX_WAIT)"

            if [ "$DIST_STATUS" = "Deployed" ]; then
              echo "‚úÖ Distribution successfully deployed!"
              break
            elif [ "$DIST_STATUS" = "InProgress" ]; then
              echo "‚è≥ Still deploying... waiting 20 seconds"
              sleep 20
              WAIT_COUNT=$((WAIT_COUNT + 1))
            else
              echo "‚ö†Ô∏è Unexpected status: $DIST_STATUS"
              sleep 20
              WAIT_COUNT=$((WAIT_COUNT + 1))
            fi
          done

          if [ $WAIT_COUNT -ge $MAX_WAIT ]; then
            echo "‚ö†Ô∏è Wait timed out after ~20 minutes, but update was initiated successfully"
            echo "Distribution will continue deploying in the background"
            echo "Check AWS Console for final status: https://console.aws.amazon.com/cloudfront/home?region={{{githubVarsOpen}}} env.AWS_REGION {{{githubVarsClose}}}#distribution-settings:$DISTRIBUTION_ID"
          fi

          echo "‚úÖ CloudFront alternate domain configuration completed!"
          echo ""
          echo "üìã Summary:"
          echo "  Distribution ID: $DISTRIBUTION_ID"
          echo "  Alternate Domain: $UI_DOMAIN"
          echo "  Certificate: $CERT_ARN"
          echo ""
          echo "üåê Your application will be available at: https://$UI_DOMAIN"
          echo ""
          echo "‚ö†Ô∏è Note: DNS propagation may take a few minutes"

          # Cleanup temp files
          rm -f /tmp/dist-config.json /tmp/updated-dist-config.json /tmp/final-config.json

      - name: Update Route53 DNS for CloudFront
        run: |
          echo "DEBUG: Setting up Route53 DNS for CloudFront distribution..."

          # Get CloudFront domain from the distribution
          echo "DEBUG: Getting CloudFront domain name..."
          DISTRIBUTION_ID="{{{githubVarsOpen}}} env.DISTRIBUTION_ID {{{githubVarsClose}}}"
          CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id "$DISTRIBUTION_ID" \
            --query 'Distribution.DomainName' --output text 2>/dev/null || echo "")

          if [ -z "$CLOUDFRONT_DOMAIN" ] || [ "$CLOUDFRONT_DOMAIN" = "None" ]; then
            echo "‚ùå Could not get CloudFront domain name"
            exit 1
          fi

          echo "‚úÖ CloudFront domain: $CLOUDFRONT_DOMAIN"

          # Domain construction with environment-specific prefix
          if [ "${ENVIRONMENT}" = "production" ]; then
            UI_DOMAIN="{{projectName}}-ui.{{sld}}.{{tld}}"
          else
            UI_DOMAIN="{{projectName}}-${ENVIRONMENT}-ui.{{sld}}.{{tld}}"
          fi
          DOMAIN_BASE="{{sld}}.{{tld}}"

          echo "üìã DNS Configuration:"
          echo "  Record Name: $UI_DOMAIN"
          echo "  Record Target: $CLOUDFRONT_DOMAIN"
          echo "  Zone: $DOMAIN_BASE"

          # Find Route53 hosted zone
          echo "DEBUG: Finding Route53 hosted zone for: $DOMAIN_BASE"
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones \
            --query "HostedZones[?Name=='$DOMAIN_BASE.'].Id" \
            --output text 2>/dev/null | sed 's|/hostedzone/||' || true)

          if [ -z "$HOSTED_ZONE_ID" ] || [ "$HOSTED_ZONE_ID" = "None" ]; then
            echo "‚ùå No Route53 hosted zone found for domain: $DOMAIN_BASE"
            echo "üí° Please ensure you have a Route53 hosted zone configured for your domain"
            exit 1
          fi

          echo "‚úÖ Found Route53 hosted zone: $HOSTED_ZONE_ID"

          # Create Route53 alias record for CloudFront
          echo "üìù Creating Route53 alias record..."
          jq -n --arg domain "$UI_DOMAIN" --arg dns "$CLOUDFRONT_DOMAIN" '{
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": $domain,
                  "Type": "A",
                  "AliasTarget": {
                    "DNSName": $dns,
                    "EvaluateTargetHealth": false,
                    "HostedZoneId": "Z2FDTNDATAQYW2"
                  }
                }
              }
            ]
          }' > /tmp/alias-record.json

          CHANGE_ID=$(aws route53 change-resource-record-sets \
            --hosted-zone-id "$HOSTED_ZONE_ID" \
            --change-batch file:///tmp/alias-record.json \
            --query 'ChangeInfo.Id' \
            --output text 2>/dev/null || true)

          if [ -z "$CHANGE_ID" ] || [ "$CHANGE_ID" = "None" ]; then
            echo "‚ùå Failed to create Route53 alias record"
            exit 1
          fi

          echo "‚úÖ Route53 alias record created: $CHANGE_ID"

          # Wait for Route53 change to propagate
          echo "‚è≥ Waiting for Route53 change to propagate..."
          aws route53 wait resource-record-sets-changed --id "$CHANGE_ID"

          echo "‚úÖ Route53 DNS management completed!"
          echo ""
          echo "üìã DNS Summary:"
          echo "  Alias: $UI_DOMAIN -> $CLOUDFRONT_DOMAIN"
          echo "  Zone: $DOMAIN_BASE ($HOSTED_ZONE_ID)"
          echo ""
          echo "üåê Your application will be available at: https://$UI_DOMAIN"
          echo "‚è≥ DNS propagation may take a few minutes"

          # Cleanup temp file
          rm -f /tmp/alias-record.json